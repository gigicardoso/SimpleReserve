<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Minha Agenda</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.5/main.min.css" rel="stylesheet">
    <style>
  .fc-highlight,
  .fc-timegrid-bg-harness .fc-highlight,
  .fc-timegrid-bg .fc-highlight,
  .fc .fc-highlight {
    background: #84925b !important;
    opacity: 0.3 !important;
    box-shadow: none !important;
  }
  /* Remove gradiente azul do FullCalendar v5 */
  .fc-highlight {
    background-image: none !important;
  }
</style>
    <style>
      :root {
        --primary-color: #84925b;
        --primary-light: #a3b075;
        --primary-dark: #6a7749;
        --accent-color: #e8c872;
        --light-bg: #f4f6ee;
        --text-dark: #2d3748;
        --text-light: #718096;
        --border-color: #e2e8f0;
      }
      body {
        font-family: 'Source Sans Pro', sans-serif;
        margin: 0;
        padding: 0;
        background-color:#f4f6ee ; /*linear-gradient(135deg, #f4f6f9 0%, #e2e8f0 100%);*/
        min-height: 100vh;
        color: var(--text-dark);
        display: flex;
        align-items: flex-start;
        justify-content: center;
        padding: 0;
      }
      .calendar-container {
        max-width: 1050px;
        width: 100%;
        margin: 48px auto 32px auto;
      }
      #calendar {
        background: white;
        border-radius: 12px;
        box-shadow: 0 6px 18px rgba(0,0,0,0.08);
        overflow: hidden;
      }
      .fc-toolbar.fc-header-toolbar {
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);
        padding: 20px;
        margin-bottom: 0;
        border-radius: 12px 12px 0 0;
      }
      .fc-toolbar-title {
        color: white;
        font-size: 1.5rem;
        font-weight: 700;
      }
      .fc .fc-button {
        background: transparent;
        border: 2px solid white;
        color: white;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        padding: 0;
        font-weight: bold;
        transition: all 0.2s ease;
      }
      .fc .fc-button:hover {
        background: white;
        color: var(--primary-color);
        transform: scale(1.05);
      }
      .fc .fc-today-button {
        border-radius: 25px !important;
        padding: 8px 20px;
        background: white !important;
        color: var(--primary-color) !important;
        font-weight: 600;
        border: none !important;
        width: auto;
        height: auto;
      }
      .fc .fc-today-button:hover {
        background: rgba(255, 255, 255, 0.9) !important;
        transform: translateY(-2px);
      }
      .fc .fc-col-header-cell {
        background: var(--light-bg);
        border-color: var(--border-color);
      }
      .fc .fc-col-header-cell-cushion {
        color: var(--primary-color);
        font-weight: 700;
        padding: 12px 8px;
        font-size: 1rem;
      }
      .fc .fc-timegrid-slot {
        border-color: var(--border-color);
        height: 60px;
      }
      .fc .fc-timegrid-slot-label {
        border-color: var(--border-color);
        font-size: 0.85rem;
        color: var(--text-light);
        padding: 0 10px;
      }
      .fc-timegrid-slot-label-frame {
        display: flex;
        justify-content: flex-end;
        align-items: center;
      }
      .fc-timegrid-slot-label-frame:after {
        content: "h";
        margin-left: 2px;
        font-size: 0.75rem;
      }
      .fc .fc-timegrid-col.fc-day-today {
        background-color: rgba(132, 146, 91, 0.05);
      }
      .fc-event {
        border: none;
        border-radius: 8px;
        padding: 8px 10px;
        font-weight: 600;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        transition: all 0.2s ease;
      }
      .fc-event:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(0,0,0,0.15);
      }
      .fc-event-title {
        font-weight: 600;
      }
      .fc .fc-timegrid-now-indicator-line {
        border-color: var(--accent-color);
        border-width: 2px;
      }
      .fc .fc-timegrid-now-indicator-arrow {
        border-color: var(--accent-color);
      }
      .calendar-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 25px;
        background: white;
        border-top: 1px solid var(--border-color);
        border-radius: 0 0 12px 12px;
      }
      .calendar-legend {
        display: flex;
        gap: 15px;
      }
      .legend-item {
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 0.85rem;
        color: var(--text-light);
      }
      .legend-color {
        width: 12px;
        height: 12px;
        border-radius: 3px;
        background: var(--primary-color);
      }
      .calendar-stats {
        display: flex;
        gap: 20px;
      }
      .stat {
        text-align: center;
      }
      .stat-value {
        font-weight: 700;
        color: var(--primary-color);
        font-size: 1.1rem;
      }
      .stat-label {
        font-size: 0.8rem;
        color: var(--text-light);
      }
      .fc-highlight {
        background: #84925b !important;
        opacity: 0.3 !important;
        /* Remove qualquer box-shadow azul */
        box-shadow: none !important;
      }

      .fc-timegrid-bg-harness .fc-highlight {
        background: #84925b !important;
        opacity: 0.3 !important;
        box-shadow: none !important;
      }
      @media (max-width: 768px) {
        .calendar-footer {
          flex-direction: column;
          gap: 15px;
        }
        .fc-toolbar.fc-header-toolbar {
          padding: 15px;
        }
        .fc-toolbar-title {
          font-size: 1.2rem;
        }
      }
    </style>
  </head>
  <body>
    <div class="calendar-container">
      
      <div id="calendar"></div>
      {{> eventDetailsModal }}
      <div class="calendar-footer">
        <div class="calendar-legend">
          <div class="legend-item">
            <div class="legend-color"></div>
            <span>Eventos</span>
          </div>
          <div class="legend-item">
            <div class="legend-color" style="background: var(--accent-color);"></div>
            <span>Horário Atual</span>
          </div>
        </div>
        <div class="calendar-stats">
          <div class="stat">
            <div class="stat-value" id="event-count">0</div>
            <div class="stat-label">Eventos</div>
          </div>
          <div class="stat">
            <div class="stat-value" id="event-hours">0h</div>
            <div class="stat-label">Esta semana</div>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.4/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.5/main.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.5/locales/pt-br.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function () {
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
          initialView: 'timeGridWeek',
          locale: 'pt-br',
          slotMinTime: "08:00:00",
          slotMaxTime: "22:00:00",
          slotDuration: "00:45:00",
          slotLabelInterval: "00:45:00",
          slotLabelFormat: {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
          },
          allDaySlot: false,
          nowIndicator: true,
          headerToolbar: {
            left: 'prev,next',
            center: 'title',
            right: 'today'
          },
          events: '/agenda/api/eventos',
          selectable: true,
          selectMirror: true,
          selectAllow: function(selectInfo) {
            return true;
          },
          select: function(info) {
            const agora = new Date();
            const dataSelecionada = info.start;
            if (dataSelecionada < agora) {
              alert('Não é possível reservar para datas ou horários passados!');
              return;
            }
            const data = info.startStr.split('T')[0];
            const horaInicio = info.startStr.split('T')[1]?.slice(0,5);
            let horaFim = info.endStr.split('T')[1]?.slice(0,5);

            // Se o usuário selecionou apenas um bloco de 45 minutos
            if (info.end - info.start <= 45 * 60 * 1000) {
              // Calcula o horário final automaticamente
              const startDate = new Date(info.start);
              startDate.setMinutes(startDate.getMinutes() + 45);
              horaFim = startDate.toTimeString().slice(0,5);
            }

            let url = '/reservas?data=' + encodeURIComponent(data);
            if (horaInicio) url += '&hora_inicio=' + encodeURIComponent(horaInicio);
            if (horaFim) url += '&hora_fim=' + encodeURIComponent(horaFim);
            window.location.href = url;
          },
          selectConstraint: {
            // Garante que o bloco selecionado fique verde igual aos eventos
            backgroundColor: '#84925b',
            borderColor: '#84925b'
          },
          eventClick: function(info) {
            // Preenche o modal com os dados do evento
            const event = info.event;
            document.getElementById('modal-event-title').textContent = event.title;
            document.getElementById('modal-event-sala').textContent = event.extendedProps.sala || '-';
            document.getElementById('modal-event-date').textContent = event.start ? event.start.toLocaleDateString('pt-BR') : '-';
            document.getElementById('modal-event-time').textContent = event.start && event.end ? `${event.start.toLocaleTimeString('pt-BR', {hour: '2-digit', minute: '2-digit'})} - ${event.end.toLocaleTimeString('pt-BR', {hour: '2-digit', minute: '2-digit'})}` : '-';
            document.getElementById('modal-event-desc').textContent = event.extendedProps.descricao || '-';
            // Botões de ação
            document.getElementById('modal-delete-btn').onclick = function() {
              if(confirm('Tem certeza que deseja deletar este evento?')) {
                fetch(`/reservas/${event.id}`, { method: 'DELETE' })
                  .then(res => {
                    if(res.ok) {
                      calendar.refetchEvents();
                      var modal = bootstrap.Modal.getInstance(document.getElementById('eventDetailsModal'));
                      modal.hide();
                    } else {
                      alert('Erro ao deletar evento.');
                    }
                  });
              }
            };
            document.getElementById('modal-edit-btn').onclick = function() {
              window.location.href = `/reservas/editar/${event.id}`;
            };
            // Exibe o modal
            var modal = new bootstrap.Modal(document.getElementById('eventDetailsModal'));
            modal.show();
          }
        });
        calendar.render();

        // Função para atualizar estatísticas do rodapé
        function updateFooterStats(events) {
          // Filtrar eventos da semana visível
          const view = calendar.view;
          const start = view.activeStart;
          const end = view.activeEnd;
          let weekEvents = events.filter(ev => {
            const evStart = new Date(ev.start);
            return evStart >= start && evStart < end;
          });
          // Contar eventos
          document.getElementById('event-count').textContent = weekEvents.length;
          // Somar horas
          let totalMinutes = 0;
          weekEvents.forEach(ev => {
            if(ev.start && ev.end) {
              const start = new Date(ev.start);
              const end = new Date(ev.end);
              totalMinutes += (end - start) / 60000;
            }
          });
          const totalHours = Math.floor(totalMinutes / 60);
          const restMinutes = Math.round(totalMinutes % 60);
          document.getElementById('event-hours').textContent = totalHours + (restMinutes > 0 ? (':' + String(restMinutes).padStart(2, '0')) : '') + 'h';
        }

        // Atualizar ao carregar eventos e ao mudar de semana
        calendar.on('eventsSet', function(events) {
          updateFooterStats(events);
        });
        calendar.on('datesSet', function() {
          updateFooterStats(calendar.getEvents().map(e => ({
            start: e.start,
            end: e.end
          })));
        });
      });
    </script>
  </body>
</html>