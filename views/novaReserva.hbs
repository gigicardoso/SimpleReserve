<script>
  // Função para mostrar alerta de reserva duplicada
  function mostrarAlertaReservaDuplicada(msg) {
    const alerta = document.getElementById('alertaReservaDuplicada');
    alerta.innerText = msg;
    alerta.style.display = 'block';
    if (alerta._timeout) clearTimeout(alerta._timeout);
    alerta._timeout = setTimeout(() => { alerta.style.display = 'none'; }, 5000);
  }

  // Esconde alerta ao editar campos
  function esconderAlertaReservaDuplicada() {
    const alerta = document.getElementById('alertaReservaDuplicada');
    alerta.style.display = 'none';
    if (alerta._timeout) clearTimeout(alerta._timeout);
  }

  // Função para verificar disponibilidade real no servidor
  async function verificarDisponibilidade(salaId, data, horaInicio, horaFim) {
    // Só verifica se todos os campos estiverem preenchidos
    if (!salaId || !data || !horaInicio || !horaFim) return null;
    try {
      const resp = await fetch(`/api/verificar-disponibilidade?sala=${encodeURIComponent(salaId)}&data=${encodeURIComponent(data)}&inicio=${encodeURIComponent(horaInicio)}&fim=${encodeURIComponent(horaFim)}`);
      const result = await resp.json();
      // Espera resposta: { disponivel: true/false }
      return result && result.disponivel;
    } catch (err) {
      // Em caso de erro, não mostra notificação
      return null;
    }
  }

  async function atualizarNotificacao() {
    const salaId = document.getElementById('campusSala').value;
    const data = document.getElementById('eventDate').value;
    const horaInicio = document.getElementById('eventTimeStart').value;
    const horaFim = document.getElementById('eventTimeEnd').value;
    // Só verifica se todos os campos estiverem preenchidos
    if (!salaId || !data || !horaInicio || !horaFim) {
      mostrarNotificacaoDisponibilidade(null);
      return;
    }
    const disponivel = await verificarDisponibilidade(salaId, data, horaInicio, horaFim);
    mostrarNotificacaoDisponibilidade(disponivel);
  }

  document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const data = urlParams.get('data');
    if (data && !{{#if reserva}}true{{else}}false{{/if}}) {
      document.getElementById('eventDate').value = data;
    }
    // Notificação de disponibilidade
    function verificarDisponibilidade(data, horaInicio, horaFim) {
      // Simulação: se hora início for antes de 12:00, disponível
      if (!data || !horaInicio || !horaFim) return null;
      const hora = parseInt(horaInicio.split(':')[0]);
      return hora < 12;
    }

    function mostrarNotificacaoDisponibilidade(disponivel) {
      const notificacao = document.getElementById('notificacaoDisponibilidade');
      if (disponivel === null) {
        notificacao.style.display = 'none';
        notificacao.innerHTML = '';
        return;
      }
      notificacao.style.display = 'block';
      if (disponivel) {
        notificacao.className = 'alert alert-success mt-3';
        notificacao.innerHTML = '<strong>Horário disponível!</strong>';
      } else {
        notificacao.className = 'alert alert-danger mt-3';
        notificacao.innerHTML = '<strong>Não há horário disponível para esta sala!</strong>';
      }
    }

    // Adiciona listeners para esconder alerta ao editar campos
    ['campusSala','eventDate','eventTimeStart','eventTimeEnd'].forEach(id => {
      const el = document.getElementById(id);
      if (el) el.addEventListener('input', esconderAlertaReservaDuplicada);
    });

    // Intercepta submit do formulário para verificar duplicidade
    document.getElementById('formReserva').addEventListener('submit', async function(e) {
      const sala = document.getElementById('campusSala').value;
      const data = document.getElementById('eventDate').value;
      const horaInicio = document.getElementById('eventTimeStart').value;
      const horaFim = document.getElementById('eventTimeEnd').value;
      // Chamada à API para verificar conflito (ajuste a rota conforme seu backend)
      try {
        const resp = await fetch(`/api/reservas/check?data=${encodeURIComponent(data)}&sala=${encodeURIComponent(sala)}&inicio=${encodeURIComponent(horaInicio)}&fim=${encodeURIComponent(horaFim)}`);
        const result = await resp.json();
        if (result && result.conflito) {
          mostrarAlertaReservaDuplicada('Já existe uma reserva para esta sala neste horário!');
          e.preventDefault();
          return false;
        }
      } catch (err) {
        // Se erro na API, deixa enviar normalmente
      }
    });
  });
</script>

<div class="container py-4">
  <div class="row justify-content-center">
    <div class="col-12 col-md-8 col-lg-6">
      <div class="card shadow">
        <div class="card-header bg-success text-white d-flex align-items-center justify-content-between">
          <h2 class="mb-0 flex-grow-1">
            <i class="bi bi-calendar-plus me-2"></i>
            {{#if isEdicao}}Editar Reserva{{else}}Nova Reserva{{/if}}
          </h2>
        </div>
        <div class="card-body">
          <!-- Alerta de reserva duplicada -->
          <div id="alertaReservaDuplicada" class="alert alert-danger mt-2" style="display:none;"></div>
          {{#if erro}}
            <div class="alert alert-danger mt-3" role="alert">
              {{erro}}
            </div>
          {{/if}}
          <form id="formReserva" method="POST" action="{{#if isEdicao}}/editarReservaDia/{{reserva.id_agenda}}{{else}}/reservas/nova{{/if}}">
            <div class="mb-3">
              <label for="eventName" class="form-label">*Nome do evento</label>
              <input type="text" id="eventName" name="nome_evento" class="form-control" required
                placeholder="Digite o nome do evento"
                value="{{#if reserva}}{{reserva.nome_evento}}{{/if}}" />
            </div>
            <div class="mb-3">
              <label for="campusSala" class="form-label">*Sala do campus</label>
              <select id="campusSala" name="id_salas" class="form-select" required>
                <option value="">Selecione uma sala</option>
                {{#each salas}}
                  <option value="{{id_salas}}"
                    {{#if ../reserva}}
                      {{#ifCond id_salas ../reserva.id_salas}}selected{{/ifCond}}
                    {{/if}}
                  >{{nome_salas}}</option>
                {{/each}}
              </select>
            </div>
            <div class="mb-3">
              <label for="eventDate" class="form-label">*Data do evento</label>
              <input type="date" id="eventDate" name="data" class="form-control" required
                value="{{#if reserva}}{{reserva.data}}{{/if}}" />
            </div>
            <div class="mb-3">
              <label for="eventTimeStart" class="form-label">*Hora início</label>
              <input type="time" id="eventTimeStart" name="hora_inicio" class="form-control" required
                value="{{#if reserva}}{{reserva.hora_inicio}}{{/if}}" />
            </div>
            <div class="mb-3">
              <label for="eventTimeEnd" class="form-label">*Hora final</label>
              <input type="time" id="eventTimeEnd" name="hora_final" class="form-control" required
                value="{{#if reserva}}{{reserva.hora_final}}{{/if}}" />
            </div>
            <!-- Notificação de disponibilidade -->
            <div id="notificacaoDisponibilidade" style="display:none;" class="mt-3"></div>
            <div class="mb-3">
              <label for="observations" class="form-label">Observações</label>
              <textarea id="observations" name="descricao" class="form-control" placeholder="Digite a descrição do evento">{{#if reserva}}{{reserva.descricao}}{{/if}}</textarea>
            </div>
            <div class="d-flex gap-2">
              <button type="reset" class="btn btn-secondary flex-fill">Limpar</button>
              <button type="submit" class="btn btn-success flex-fill">
                <i class="bi bi-calendar-plus me-2"></i>
                {{#if isEdicao}}Salvar Alterações{{else}}Salvar Evento{{/if}}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<link rel="stylesheet" href="/stylesheets/novaReserva.css">