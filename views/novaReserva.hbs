<script>
  // Exibe uma mensagem de alerta persistente
  function mostrarAlerta(msg, tipo = 'danger') {
    const alerta = document.getElementById('alertaReservaDuplicada');
    alerta.innerText = msg;
    alerta.className = `alert alert-${tipo} mt-2`;
    alerta.style.display = 'block';
  }

  function limparAlerta() {
    const alerta = document.getElementById('alertaReservaDuplicada');
    alerta.style.display = 'none';
    alerta.innerText = '';
  }

  // Mostra card de disponibilidade (verde/vermelho)
  function mostrarNotificacaoDisponibilidade(payload) {
    const notificacao = document.getElementById('notificacaoDisponibilidade');
    // Se o container não existir, não exibe a notificação secundária
    if (!notificacao) return;
    if (payload === null) {
      notificacao.style.display = 'none';
      notificacao.innerHTML = '';
      return;
    }

    notificacao.style.display = 'block';
    if (payload.disponivel) {
      notificacao.className = 'alert alert-success mt-3';
      notificacao.innerHTML = '<strong>Horário disponível!</strong>';
    } else {
      const salaSel = document.getElementById('campusSala');
      const salaNome = payload.nomeSala || (salaSel && salaSel.options[salaSel.selectedIndex] ? salaSel.options[salaSel.selectedIndex].text : 'Sala');
      notificacao.className = 'alert alert-danger mt-3';
      
      // Se houver múltiplos conflitos, lista todos
      if (payload.conflitos && payload.conflitos.length > 1) {
        let listaConflitos = '<strong>Horário ocupado!</strong> Existem ' + payload.conflitos.length + ' reservas neste período:<ul style="margin-top: 8px; margin-bottom: 0;">';
        payload.conflitos.forEach(c => {
          listaConflitos += `<li><strong>${salaNome}</strong> reservado de <strong>${c.inicio}</strong> às <strong>${c.fim}</strong> por <strong>${c.nomeUsuario}</strong></li>`;
        });
        listaConflitos += '</ul>';
        notificacao.innerHTML = listaConflitos;
      } else {
        // Um único conflito
        const ini = payload.sobreposicao && payload.sobreposicao.inicio ? payload.sobreposicao.inicio : '';
        const fim = payload.sobreposicao && payload.sobreposicao.fim ? payload.sobreposicao.fim : '';
        const usuario = payload.nomeUsuario || 'outro usuário';
        notificacao.innerHTML = `<strong>${salaNome}</strong> reservado de <strong>${ini}</strong> até <strong>${fim}</strong> por <strong>${usuario}</strong>`;
      }
    }
  }

  // Chama backend para verificar disponibilidade e detalhar sobreposição
  let _debounceTimer;
  async function checarDisponibilidadeLive() {
    const salaId = document.getElementById('campusSala').value;
    const data = document.getElementById('eventDate').value;
    const horaInicio = document.getElementById('eventTimeStart').value;
    const horaFim = document.getElementById('eventTimeEnd').value;

    if (!salaId || !data || !horaInicio || !horaFim) {
      limparAlerta();
      mostrarNotificacaoDisponibilidade(null);
      return;
    }

    // Validações básicas locais
    if (horaFim <= horaInicio) {
      mostrarAlerta('O horário de fim deve ser maior que o horário de início!');
      mostrarNotificacaoDisponibilidade({ disponivel: false, sobreposicao: { inicio: horaInicio, fim: horaFim } });
      return;
    }

    clearTimeout(_debounceTimer);
    _debounceTimer = setTimeout(async () => {
      try {
        const resp = await fetch('/reservas/verificar-disponibilidade', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id_salas: salaId, data, hora_inicio: horaInicio, hora_final: horaFim })
        });
        const result = await resp.json();
        if (result && result.disponivel === false) {
          const salaSel = document.getElementById('campusSala');
          const salaNome = result.nomeSala || (salaSel && salaSel.options[salaSel.selectedIndex] ? salaSel.options[salaSel.selectedIndex].text : 'Sala');
          
          // Se houver múltiplos conflitos, mostra todos
          if (result.conflitos && result.conflitos.length > 1) {
            let mensagem = `Horário ocupado! ${result.conflitos.length} reservas conflitantes:\n`;
            result.conflitos.forEach((c, idx) => {
              mensagem += `${idx + 1}. ${salaNome} das ${c.inicio} às ${c.fim} por ${c.nomeUsuario}\n`;
            });
            mostrarAlerta(mensagem);
          } else {
            const ini = result.sobreposicao?.inicio || '';
            const fim = result.sobreposicao?.fim || '';
            const usuario = result.nomeUsuario || 'outro usuário';
            mostrarAlerta(`${salaNome} reservado das ${ini} às ${fim} por ${usuario}`);
          }
        } else if (result && result.disponivel === true) {
          // Mostra também alerta positivo no topo
          mostrarAlerta('Horário disponível!', 'success');
        } else {
          // Caso não haja payload válido, limpa
          limparAlerta();
        }
        mostrarNotificacaoDisponibilidade(result);
      } catch (err) {
        // Silencia erros transitórios
      }
    }, 300);
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Impede datas passadas no input
    const hoje = new Date().toISOString().slice(0, 10);
    document.getElementById('eventDate').setAttribute('min', hoje);

    // Pré-preenche a partir da URL (quando vindo do calendário)
    const urlParams = new URLSearchParams(window.location.search);
    const data = urlParams.get('data');
    const horaInicio = urlParams.get('hora_inicio');
    const horaFim = urlParams.get('hora_fim');
    if (data && !{{#if reserva}}true{{else}}false{{/if}}) document.getElementById('eventDate').value = data;
    if (horaInicio && !{{#if reserva}}true{{else}}false{{/if}}) document.getElementById('eventTimeStart').value = horaInicio;
    if (horaFim && !{{#if reserva}}true{{else}}false{{/if}}) document.getElementById('eventTimeEnd').value = horaFim;

    // Listeners para checagem em tempo real
    ['campusSala','eventDate','eventTimeStart','eventTimeEnd'].forEach(id => {
      const el = document.getElementById(id);
      if (!el) return;
      el.addEventListener('change', checarDisponibilidadeLive);
      el.addEventListener('input', checarDisponibilidadeLive);
    });

    // Validação no submit: impede envio se estiver ocupado
    document.getElementById('formReserva').addEventListener('submit', async function(e) {
      const salaId = document.getElementById('campusSala').value;
      const data = document.getElementById('eventDate').value;
      const horaInicio = document.getElementById('eventTimeStart').value;
      const horaFim = document.getElementById('eventTimeEnd').value;
      if (!salaId || !data || !horaInicio || !horaFim) return; // HTML5 já bloqueia
      if (horaFim <= horaInicio) {
        e.preventDefault();
        mostrarAlerta('O horário de fim deve ser maior que o horário de início!');
        return false;
      }
      try {
        const resp = await fetch('/reservas/verificar-disponibilidade', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id_salas: salaId, data, hora_inicio: horaInicio, hora_final: horaFim })
        });
        const result = await resp.json();
        if (result && result.disponivel === false) {
          e.preventDefault();
          const salaSel = document.getElementById('campusSala');
          const salaNome = result.nomeSala || (salaSel && salaSel.options[salaSel.selectedIndex] ? salaSel.options[salaSel.selectedIndex].text : 'Sala');
          
          // Se houver múltiplos conflitos, mostra todos
          if (result.conflitos && result.conflitos.length > 1) {
            let mensagem = `Horário ocupado! ${result.conflitos.length} reservas conflitantes:\n`;
            result.conflitos.forEach((c, idx) => {
              mensagem += `${idx + 1}. ${salaNome} das ${c.inicio} às ${c.fim} por ${c.nomeUsuario}\n`;
            });
            mostrarAlerta(mensagem);
          } else {
            const ini = result.sobreposicao?.inicio || '';
            const fim = result.sobreposicao?.fim || '';
            const usuario = result.nomeUsuario || 'outro usuário';
            mostrarAlerta(`${salaNome} reservado das ${ini} às ${fim} por ${usuario}`);
          }
          return false;
        }
      } catch (err) {
        // Em caso de erro na checagem, permite envio para validação server-side
      }
    });

    // Checa imediatamente após carregar (se vier com dados por query)
    checarDisponibilidadeLive();
  });
</script>

<div class="container py-4">
  <div class="row justify-content-center">
    <div class="col-12 col-md-8 col-lg-6">
      <div class="card shadow">
        <div class="card-header bg-success text-white d-flex align-items-center justify-content-between">
          <h2 class="mb-0 flex-grow-1">
            <i class="bi bi-calendar-plus me-2"></i>
            {{#if isEdicao}}Editar Reserva{{else}}Nova Reserva{{/if}}
          </h2>
        </div>
        <div class="card-body">
          <!-- Alerta de reserva duplicada -->
          <div id="alertaReservaDuplicada" class="alert alert-danger mt-2" style="display:none;"></div>
          {{#if erro}}
            <div class="alert alert-danger mt-3" role="alert">
              {{erro}}
            </div>
          {{/if}}
          <form id="formReserva" method="POST" action="{{#if isEdicao}}/reservas/editar/{{reserva.id_agenda}}{{else}}/reservas/nova{{/if}}">
            {{#if origem}}
              <input type="hidden" name="origem" value="{{origem}}" />
            {{/if}}
            <div class="mb-3">
              <label for="eventName" class="form-label">*Nome do evento</label>
              <input type="text" id="eventName" name="nome_evento" class="form-control" required
                placeholder="Digite o nome do evento"
                value="{{#if reserva}}{{reserva.nome_evento}}{{/if}}" />
            </div>
            <div class="mb-3">
              <label for="campusSala" class="form-label">*Sala do campus</label>
              <select id="campusSala" name="id_salas" class="form-select" required>
                <option value="">Selecione uma sala</option>
                {{#each salas}}
                  <option value="{{id_salas}}"
                    {{#if ../reserva}}
                      {{#ifCond id_salas ../reserva.id_salas}}selected{{/ifCond}}
                    {{/if}}
                  >{{nome_salas}}</option>
                {{/each}}
              </select>
            </div>
            <div class="mb-3">
              <label for="eventDate" class="form-label">*Data do evento</label>
              <input type="date" id="eventDate" name="data" class="form-control" required
                value="{{#if reserva}}{{reserva.data}}{{/if}}" />
            </div>
            <div class="mb-3">
              <label for="eventTimeStart" class="form-label">*Hora início</label>
              <input type="time" id="eventTimeStart" name="hora_inicio" class="form-control" required
                value="{{#if reserva}}{{reserva.hora_inicio}}{{/if}}" />
            </div>
            <div class="mb-3">
              <label for="eventTimeEnd" class="form-label">*Hora final</label>
              <input type="time" id="eventTimeEnd" name="hora_final" class="form-control" required
                value="{{#if reserva}}{{reserva.hora_final}}{{/if}}" />
            </div>
            <div class="mb-3">
              <label for="observations" class="form-label">Observações</label>
              <textarea id="observations" name="descricao" class="form-control" placeholder="Digite a descrição do evento">{{#if reserva}}{{reserva.descricao}}{{/if}}</textarea>
            </div>
            <div class="d-flex gap-2">
              <button type="reset" class="btn btn-secondary flex-fill">Limpar</button>
              <button type="submit" class="btn btn-success flex-fill">
                <i class="bi bi-calendar-plus me-2"></i>
                {{#if isEdicao}}Salvar Alterações{{else}}Salvar Evento{{/if}}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<link rel="stylesheet" href="/stylesheets/novaReserva.css">